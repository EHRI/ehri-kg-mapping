ITERATOR people_iterator <jsonpath: $.data.AuthoritativeSet.authorities.items[*]> {
	PUSHED_FIELD id <identifier>
    FIELD name <description.name>
    FIELD lastName <description.lastName>
    FIELD firstName <description.firstName>
    PUSHED_FIELD languageCode <description.languageCode>
    FIELD sourceLink <description.source>
    FIELD datesOfExistence <description.datesOfExistence>
    FIELD biographicalHistory <description.biographicalHistory>
    FIELD typeOfEntity <description.typeOfEntity>
    FIELD legalStatus <description.legalStatus>
    FIELD structure <description.structure>
    FIELD generalContext <description.generalContext>
    FIELD occupation <description.occupation>
  	ITERATOR links <links[*]> {
        ITERATOR targets <targets[?(@.type=='DocumentaryUnit')]> {
            FIELD unit_id <id>
            POPPED_FIELD person_id <id>
        }    
    }
    ITERATOR dates <description.dates[*]> {
        FIELD startDate <startDate>
        FIELD endDate <endDate>
        POPPED_FIELD person_id <id>
    }
    ITERATOR otherFormsOfName <description.otherFormsOfName> {
        FIELD name <[*]>
        POPPED_FIELD person_id <id>
    }
    ITERATOR parallelFormsOfName <description.parallelFormsOfName> {
        FIELD name <[*]>
        POPPED_FIELD person_id <id>
    }
    ITERATOR funcs <description.functions> {
        FIELD func <[*]>
        POPPED_FIELD langCode <languageCode>
        POPPED_FIELD person_id <id>
    }
    ITERATOR place <description.place> {
        FIELD place <[*]>
        POPPED_FIELD person_id <id>
    }
    ITERATOR mandates <description.mandates> {
        FIELD mandate <[*]>
        POPPED_FIELD langCode <languageCode>
        POPPED_FIELD person_id <id>
    }
}

EXPRESSION person <people.people_iterator>
EXPRESSION other_name_id <people.people_iterator.otherFormsOfName.person_id + "/otherNames/" + people.people_iterator.otherFormsOfName.name>
EXPRESSION parallel_name_id <people.people_iterator.parallelFormsOfName.person_id + "/parallelNames/" + people.people_iterator.parallelFormsOfName.name>

ehri:Person ehri_pers:[person.id] {
    a ehri:Person ;
    rico:name [person.name] ;
    rico:history [person.biographicalHistory] @[person.languageCode MATCHING langcode_two_digit_equivalent] ;
    rico:hasOrHadAgentName @ehri:AgentParallelName ;
    rico:hasOrHadAgentName @ehri:AgentOtherName ;
    rdfs:seeAlso [transformers.removeSquareBrackets(person.sourceLink) IF validators.isURL(person.sourceLink)] ;
    ehri:sources [transformers.removeSquareBrackets(person.sourceLink) IF validators.nonURL(person.sourceLink)] @[person.languageCode MATCHING langcode_two_digit_equivalent] ; 
    rico:date [person.datesOfExistence] ; 
	rico:hasBirthDate @ehri:PersonBeginningDate ;
	rico:hasDeathDate @ehri:PersonEndDate ;
    # rico:agentHasOrHadLocation @ehri:AuthorityPlace ; # It will be difficult to determine the correct prefix among cities, countries and regions.
    rico:hasOrHadLegalStatus @ehri:AuthorityLegalStatus ;
    rico:performsOrPerformed @ehri:AuthorityOccupation ;
    rico:performsOrPerformed @ehri:AuthorityFunction ;
    rico:authorizedBy @ehri:AuthorityMandate ;
    ehri:structureOrGenealogy [person.structure] @[person.languageCode MATCHING langcode_two_digit_equivalent] ; # This can be divided in structure of cb and genealogy of family if needed
    rico:generalDescription [person.generalContext] @[person.languageCode MATCHING langcode_two_digit_equivalent] ;
}

ehri:Link ehri_units:[person.links.targets.unit_id] {
    rico:hasOrHadSubject ehri_pers:[person.links.targets.person_id] ;
}

ehri:AgentOtherName ehri_pers:[other_name_id] {
	a ehri:AlternateAgentName ;
	rico:name [person.otherFormsOfName.name] ;
	rico:isOrWasAgentNameOf ehri_pers:[person.otherFormsOfName.person_id] ;
}

ehri:AgentParallelName ehri_pers:[parallel_name_id] {
	a ehri:ParallelAgentName ;
	rico:name [person.parallelFormsOfName.name] ;
	rico:isOrWasAgentNameOf ehri_pers:[person.parallelFormsOfName.person_id] ;
}

ehri:PersonBeginningDate ehri_dates:[person.dates.startDate] { 
	a rico:Date ;
	rico:normalizedDateValue [person.dates.startDate] ;
	rico:isBirthDateOf ehri_pers:[person.dates.person_id] ;
}

ehri:PersonEndDate ehri_dates:[person.dates.endDate] { 
	a rico:Date ;
	rico:normalizedDateValue [person.dates.endDate] ;
	rico:isDeathDateOf ehri_pers:[person.dates.person_id] ;
}

ehri:AuthorityLegalStatus ehri_pers:[transformers.combinedPathHistoricalAgentLegalStatus(person.id) IF validators.nonEmpty(person.legalStatus)] {
    a rico:LegalStatus ;
    rico:generalDescription [person.legalStatus] @[person.languageCode MATCHING langcode_two_digit_equivalent] ;
    rico:isOrWasLegalStatusOf ehri_pers:[person.id] ;
}

ehri:AuthorityOccupation ehri_pers:[transformers.combinedPathHistoricalAgentOccupation(person.id) IF validators.nonEmpty(person.occupation)] {
    a rico:Activity ;
    rico:hasOrHadActivityType rico:OccupationType ;
    rico:generalDescription [person.occupation] @[person.languageCode MATCHING langcode_two_digit_equivalent] ;
    rico:isOrWasPerformedBy ehri_pers:[person.id] ;
}

ehri:AuthorityFunction ehri_pers:[transformers.combinedPathHistoricalAgentFunction(person.funcs.person_id, person.funcs.func.index())] {
    a rico:Activity ;
    rico:hasOrHadActivityType ehri:FunctionType ;
    rico:generalDescription [person.funcs.func] @[person.funcs.langCode MATCHING langcode_two_digit_equivalent] ;
    rico:isOrWasPerformedBy ehri_pers:[person.funcs.person_id] ;
}

ehri:AuthorityMandate ehri_pers:[transformers.combinedPathHistoricalAgentMandate(person.mandates.person_id, person.mandates.mandate.index())] {
    a rico:Mandate ;
    rico:generalDescription [person.mandates.mandate] @[person.mandates.langCode MATCHING langcode_two_digit_equivalent] ;
    rico:authorizes ehri_pers:[person.mandates.person_id] ;
} 