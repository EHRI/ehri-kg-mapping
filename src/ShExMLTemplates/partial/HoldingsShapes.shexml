#########################
### Documentary Units ###
#########################

# Shape for RecordSet
ehri:RecordSet ehri_units:[holding.holding_id IF validators.isRecordSet(holding.itemCount)] { # Sometimes the level is not provided so we determine the type based on our own context
	a ehri:RecordSet ;
	rico:hasOrHadSomeMembersWithLanguage @ehri:Language ;
}

# Shape for Record
ehri:Record ehri_units:[holding.holding_id IF validators.isRecord(holding.itemCount)] { # Sometimes the level is not provided so we determine the type based on our own context
	a ehri:Record ;
	rico:hasOrHadLanguage @ehri:Language ;
}

ehri:Holding ehri_units:[holding.holding_id] { # common shape
	# a ehri:[transformers.recordOrRecordSet(holding.descriptions.levelOfDescription, holding.itemCount)] ; # This allows for more fine-grained control of the type if needed
	rico:hasRecordSetType ric_rst:[transformers.getRecordSetType(holding.descriptions.levelOfDescription) IF validators.isRecordSetTypeDefinedInRiC(holding.descriptions.levelOfDescription)] ;
	rico:hasRecordSetType ehri_rst:[transformers.getEHRIDefinedRecordSetType(holding.descriptions.levelOfDescription) IF validators.isRecordSetTypeDefinedInEHRI(holding.descriptions.levelOfDescription)] ;
	rico:title [holding.descriptions.name] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ;
	rico:hasOrHadTitle @ehri:HoldingParralelFormOfName ;
	rico:scopeAndContent [holding.descriptions.scopeAndContent] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ;
	rico:recordResourceExtent [holding.descriptions.extentAndMedium] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ;
	rico:recordResourceStructure [holding.descriptions.systemOfArrangement] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ;
	rico:date [holding.descriptions.datesOfDescription] ;
	rico:date [holding.descriptions.unitDates] ;
	rico:hasBeginningDate @ehri:HoldingBeginningDate ;
	rico:hasEndDate @ehri:HoldingEndDate ;
	rico:isOrWasIncludedIn ehri_units:[holding.parentId] ;
	rico:resultsOrResultedFrom @ehri:Acquisition ;
	rico:identifier [holding.identifier] ;
	rico:history [holding.descriptions.biographicalHistory] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ;
	rico:history [holding.descriptions.archivalHistory] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ;
	ehri:appraisal [holding.descriptions.appraisal] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ;
	rico:accruals [holding.descriptions.accruals] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ;
	rico:conditionsOfAccess [holding.descriptions.conditionsOfAccess] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ; 
	rico:conditionsOfUse [holding.descriptions.conditionsOfUse] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ; 
	rico:conditionsOfUse [holding.descriptions.conditionsOfReproduction] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ;
	ehri:scriptOfMaterials @ehri:MaterialScript ;
	ehri:physicalCharacterisiticsAndTechnicalRequirements [holding.descriptions.physicalCharacteristics] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ; 
	ehri:otherFindingAids [holding.descriptions.findingAids] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ; 
	ehri:locationOfOriginals [holding.descriptions.locationOfOriginals] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ; 
	ehri:locationOfCopies [holding.descriptions.locationOfCopies] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ; 
	ehri:wasUsedAsSourceIn [holding.descriptions.publicationNote] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ; 
	ehri:sources [holding.descriptions.sources] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ; 
	ehri:notes [holding.descriptions.notes] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ; 
	ehri:archivistNote [holding.descriptions.archivistNote] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ; 
	ehri:relatedMaterial [holding.descriptions.relatedUnitsOfDescription] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ; 
	ehri:separatedMaterial [holding.descriptions.separatedUnitsOfDescription] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ; 
	rico:hasOrHadHolder ehri_institutions:[holding.repositoryId] ;
	rdfs:seeAlso [holding.descriptions.ref IF validators.isURL(holding.descriptions.ref)] ;
	rico:hasOrHadIdentifier @ehri:AlternateIds ;
}

ehri:Institution ehri_institutions:[holding.repositoryId] {
	rico:isOrWasHolderOf ehri_units:[holding.holding_id] ;
}

ehri:HoldingParralelFormOfName ehri_units:[parallel_name_id] { 
	a rico:Title ;
	rico:name [holding.descriptions.parallelFormsOfName.name] @[holding.descriptions.parallelFormsOfName.langCode MATCHING langcode_two_digit_equivalent] ;
	rico:isOrWasTitleOf ehri_units:[holding.descriptions.parallelFormsOfName.holding_id] ;
}

ehri:HoldingBeginningDate _:[holding.descriptions.dates.startDate] { 
	a rico:Date ;
	rico:normalizedDateValue [holding.descriptions.dates.startDate] ;
	rico:isBeginningDateOf ehri_units:[holding.descriptions.dates.holding_id] ;
}

ehri:HoldingEndDate _:[holding.descriptions.dates.endDate] { 
	a rico:Date ;
	rico:normalizedDateValue [holding.descriptions.dates.endDate] ;
	rico:isEndDateOf ehri_units:[holding.descriptions.dates.holding_id] ;
}

ehri:ArchiveComponent ehri_units:[holding.parentId] {
	rico:includesOrIncluded ehri_units:[holding.holding_id] ;
}

ehri:Language ehri_languages:[holding.descriptions.languageOfMaterial.lang] {
   	a rico:Language ;
   	rico:name [holding.descriptions.languageOfMaterial.lang] ;
}

ehri:Acquisition ehri_units:[transformers.combinedPathHoldingAcquisition(holding.holding_id) IF validators.nonEmpty(holding.descriptions.acquisition)] {
	a rico:Activity ;
	rico:hasActivityType ehri:AcquisitionType ;
	rico:generalDescription [holding.descriptions.acquisition] @[holding.descriptions.languageCode MATCHING langcode_two_digit_equivalent] ;
}

ehri:MaterialScript ehri_material_script:[holding.descriptions.scriptOfMaterial.script] {
	a ehri:MaterialScript ;
	rico:name [holding.descriptions.scriptOfMaterial.script] ;
}

ehri:AlternateIds ehri_units:[transformers.combinedPathHoldingAlternateIDs(holding.otherIdentifiers.holding_id, holding.otherIdentifiers.holding_id.index()) IF validators.nonEmpty(holding.otherIdentifiers.identifier)] {
	a rico:Identifier ;
	rico:textualValue [holding.otherIdentifiers.identifier] ;
	rico:isOrWasIdentifierOf ehri_units:[holding.otherIdentifiers.holding_id] ;
}

##################
### Copy links ###
##################

# In these links it is not possible to put the description unless we reify the data model, TBD.

## Location of Originals ##
# unit to unit or unit to institution
ehri:HoldingLocationOfOriginals ehri_units:[holding.links.loc_org.targets.source_id IF validators.areSourceAndTargetDifferentAndIsSubjectDocumentaryUnit(holding.links.loc_org.targets.source_id, holding.links.loc_org.targets.target_id, holding.links.loc_org.targets.source_type)] {
    # The object is a documentary unit
    ehri:isCopyOf ehri_units:[holding.links.loc_org.targets.target_id IF validators.isDocumentaryUnit(holding.links.loc_org.targets.type)] ;
    # The object is an institution
    ehri:isCopyOf ehri_institutions:[holding.links.loc_org.targets.target_id IF validators.isInstitution(holding.links.loc_org.targets.type)] ;
}
# institution to unit
ehri:HoldingLocationOfOriginalsUnitSubject ehri_institutions:[holding.links.loc_org.targets.source_id IF validators.areSourceAndTargetDifferentAndIsSubjectInstitution(holding.links.loc_org.targets.source_id, holding.links.loc_org.targets.target_id, holding.links.loc_org.targets.source_type)] {
	ehri:isCopyOf ehri_units:[holding.links.loc_org.targets.target_id IF validators.isDocumentaryUnit(holding.links.loc_org.targets.type)] ;
}
# unit to unit or institution to unit (inverse)
ehri:HoldingLocationOfOriginalsInverse ehri_units:[holding.links.loc_org.targets.target_id IF validators.areSourceAndTargetDifferentAndIsSubjectDocumentaryUnit(holding.links.loc_org.targets.source_id, holding.links.loc_org.targets.target_id, holding.links.loc_org.targets.type)] {
    ehri:hasCopy ehri_institutions:[holding.links.loc_org.targets.source_id IF validators.isInstitution(holding.links.loc_org.targets.source_type)] ;
	ehri:hasCopy ehri_units:[holding.links.loc_org.targets.source_id IF validators.isDocumentaryUnit(holding.links.loc_org.targets.source_type)] ;
}
# unit to institution (inverse)
ehri:HoldingLocationOfOriginalsInverseInstitutionSubject ehri_institutions:[holding.links.loc_org.targets.target_id IF validators.areSourceAndTargetDifferentAndIsSubjectInstitution(holding.links.loc_org.targets.source_id, holding.links.loc_org.targets.target_id, holding.links.loc_org.targets.type)] { 
    ehri:hasCopy ehri_units:[holding.links.loc_org.targets.source_id IF validators.isDocumentaryUnit(holding.links.loc_org.targets.source_type)] ;
}

## Location of Copies ##
# institution to unit or institution to institution
ehri:HoldingLocationOfCopies ehri_units:[holding.links.loc_cop.targets.source_id IF validators.areSourceAndTargetDifferentAndIsSubjectDocumentaryUnit(holding.links.loc_cop.targets.source_id, holding.links.loc_cop.targets.target_id, holding.links.loc_cop.targets.source_type)] {
    # The object is a documentary unit
    ehri:hasCopy ehri_units:[holding.links.loc_cop.targets.target_id IF validators.isDocumentaryUnit(holding.links.loc_cop.targets.type)] ;
    # The object is an institution
    ehri:hasCopy ehri_institutions:[holding.links.loc_cop.targets.target_id IF validators.isInstitution(holding.links.loc_cop.targets.type)] ;
}
# institution to unit
ehri:HoldingLocationOfCopiesUnitSubject ehri_institutions:[holding.links.loc_cop.targets.source_id IF validators.areSourceAndTargetDifferentAndIsSubjectInstitution(holding.links.loc_cop.targets.source_id, holding.links.loc_cop.targets.target_id, holding.links.loc_cop.targets.source_type)] {
	ehri:hasCopy ehri_units:[holding.links.loc_cop.targets.target_id IF validators.isDocumentaryUnit(holding.links.loc_cop.targets.type)] ;
}
# unit to unti or institution to unit (inverse)
ehri:HoldingLocationOfCopiesInverse ehri_units:[holding.links.loc_cop.targets.target_id IF validators.areSourceAndTargetDifferentAndIsSubjectDocumentaryUnit(holding.links.loc_cop.targets.source_id, holding.links.loc_cop.targets.target_id, holding.links.loc_cop.targets.type)] {
    ehri:isCopyOf ehri_institutions:[holding.links.loc_cop.targets.source_id IF validators.isInstitution(holding.links.loc_cop.targets.source_type)] ;
	ehri:isCopyOf ehri_units:[holding.links.loc_cop.targets.source_id IF validators.isDocumentaryUnit(holding.links.loc_cop.targets.source_type)] ;
}
# unit to institution (inverse)
ehri:HoldingLocationOfCopiesInverseHoldingSubject ehri_institutions:[holding.links.loc_cop.targets.target_id IF validators.areSourceAndTargetDifferentAndIsSubjectInstitution(holding.links.loc_cop.targets.source_id, holding.links.loc_cop.targets.target_id, holding.links.loc_cop.targets.type)] { 
    ehri:isCopyOf ehri_units:[holding.links.loc_cop.targets.source_id IF validators.isDocumentaryUnit(holding.links.loc_cop.targets.source_type)] ;
}

#####################
### Creator links ###
#####################

ehri:HoldingCreator ehri_units:[holding.links.creators.unit_id] {
    rico:hasCreator ehri_cb:[transformers.removeCBPrefix(holding.links.creators.cb_id) IF validators.hasCBPrefix(holding.links.creators.cb_id)] ; # Apparently only CBs are returned in creator links, but this could be expanded if need be.
}

ehri:HoldingCreatorInverse ehri_cb:[transformers.removeCBPrefix(holding.links.creators.cb_id) IF validators.hasCBPrefix(holding.links.creators.cb_id)] {
    rico:isCreatorOf ehri_units:[holding.links.creators.unit_id] ; # Apparently only CBs are returned in creator links, but this could be expanded if need be.
}