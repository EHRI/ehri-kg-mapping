PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ehri: <http://lod.ehri-project-test.eu/ontology#>
PREFIX ehri_countries: <http://lod.ehri-project-test.eu/countries/>
PREFIX ehri_regions: <http://lod.ehri-project-test.eu/regions/>
PREFIX ehri_cities: <http://lod.ehri-project-test.eu/cities/>
PREFIX ehri_institutions: <http://lod.ehri-project-test.eu/institutions/>
PREFIX ehri_units: <http://lod.ehri-project-test.eu/units/>
PREFIX ehri_terms: <http://lod.ehri-project-test.eu/vocabularies/ehri-terms/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX schema: <http://schema.org/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rico: <https://www.ica.org/standards/RiC/ontology#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
FUNCTIONS transformers <scala: ShExMLTemplates/functions/Transformers.scala>
FUNCTIONS validators <scala: ShExMLTemplates/functions/Validators.scala>
SOURCE repositories <institutions\institutions_*.json>

ITERATOR repositories_iterator <jsonpath: $.data[*]> {
	PUSHED_FIELD id <id>
  	FIELD type <type>
  	FIELD name <attributes.name>
  	FIELD history <attributes.history>
	FIELD description <attributes.holdings>
  	FIELD address_name <attributes.address.name>
  	FIELD street_address <attributes.address.streetAddress>
  	FIELD city <attributes.address.city>
  	FIELD region <attributes.address.region>
  	FIELD postal_code <attributes.address.postalCode>
  	FIELD country <attributes.address.country>
  	FIELD country_code <relationships.country.data.id>
  	FIELD accessibility <attributes.accessibility>
  	FIELD geo_type <attributes.geo.type>
  	FIELD lat <attributes.geo.coordinates[0]>
  	FIELD long <attributes.geo.coordinates[1]>
  	FIELD telephone <attributes.address.telephone[*]>
  	FIELD fax <attributes.address.fax[*]>
  	FIELD url <attributes.address.url[*]>
	FIELD email <attributes.address.email[*]>
	FIELD openingTimes <attributes.address.openingTimes>
	FIELD contactPerson <attributes.address.contactPerson>
	FIELD mandates <attributes.mandates>
	FIELD conditions <attributes.conditions>
	FIELD reproductionServices <attributes.reproductionServices>
	FIELD generalContext <attributes.generalContext>
	FIELD administrativeStructure <attributes.administrativeStructure>
	FIELD records <attributes.records>
	FIELD buildings <attributes.buildings>
	FIELD holdings <attributes.holdings> # this seems to be repeated wrt to the description, check!
	FIELD researchServices <attributes.researchServices>
	FIELD publicAreas <attributes.publicAreas>
	ITERATOR coordinates <attributes.geo.coordinates> {
		FIELD lat <[0]>
		FIELD long <[1]>
		POPPED_FIELD repository_id <id>
	}
	ITERATOR parallelNames <attributes.parallelFormsOfName> {
		FIELD name <[*]>
		POPPED_FIELD repository_id <id>
	}
	ITERATOR otherNames <attributes.otherFormsOfName> {
		FIELD name <[*]>
		POPPED_FIELD repository_id <id>
	}
}

EXPRESSION organization <repositories.repositories_iterator>
EXPRESSION parallel_name_id <repositories.repositories_iterator.parallelNames.repository_id + "/parallelNames/" + repositories.repositories_iterator.parallelNames.name>
EXPRESSION other_name_id <repositories.repositories_iterator.otherNames.repository_id + "/otherNames/" + repositories.repositories_iterator.otherNames.name>


ehri:Institution ehri_institutions:[organization.id] {
	a ehri:Institution ;
  	rico:name [organization.name] ;
	schema:openingHours [organization.openingTimes] ;
	rico:history [organization.history] @eng ; #the language is not offered by the API but it would be safer to generate this dynamically
	rico:generalDescription [organization.description] @eng ;
	ehri:institutionConditionsOfAccess [organization.conditions] @eng ;
	ehri:institutionReproductionServices [organization.reproductionServices] @eng ;
	ehri:generalContext [organization.generalContext] @eng ;
	ehri:administrativeStructure [organization.administrativeStructure] @eng ;
	ehri:recordsManagementAndCollectingPolicies [organization.records] @eng ;
	ehri:buildings [organization.buildings] @eng ;
	ehri:holdings [organization.holdings] @eng ;
	ehri:accesibility [organization.accessibility] @eng ;
	ehri:researchServices [organization.researchServices] @eng ;
	ehri:publicAreas [organization.publicAreas] @eng ;
	rdfs:seeAlso [organization.url] ;
  	rico:agentHasOrHadLocation @ehri:InstitutionLocation ;
	rico:hasOrHadAgentName @ehri:AgentParallelName ;
	rico:hasOrHadAgentName @ehri:AgentOtherName ;
	rico:authorizedBy @ehri:Mandate ;
}

ehri:InstitutionLocation ehri_institutions:[transformers.combinedPathInstitutionLocation(organization.id)] { # Test for a combined path solution but it only takes into account that one address can exist for now.
	a rico:Place ;
	rico:isOrWasContainedBy @ehri:Region ;
	rico:isOrWasContainedBy @ehri:City ;
	rico:isOrWasContainedBy ehri_countries:[organization.country_code] ;
	rico:hasOrHadPhysicalLocation @ehri:InstitutionAddress ;
}
 
ehri:InstitutionAddress ehri_institutions:[transformers.combinedPathInstitutionAddress(organization.id)] { # Test for a combined path solution but it only takes into account that one address can exist for now.
	a ehri:InstitutionAddress ;
	rico:hasOrHadCoordinates @ehri:Coordinates ;
	schema:postalCode [organization.postal_code] ;
	rico:name [organization.street_address] ;
	schema:faxNumber [organization.fax] ;
  	schema:telephone [organization.telephone] ;
	schema:email [organization.email] ;
	ehri:contactPerson [organization.contactPerson] ;
	schema:contactType [organization.address_name] ;
	rico:isOrWasPhysicalLocationOf ehri_institutions:[transformers.combinedPathInstitutionLocation(organization.id)] ;
}

ehri:Coordinates ehri_institutions:[transformers.combinedPathInstitutionCoordinates(organization.coordinates.repository_id, organization.coordinates.lat, organization.coordinates.long)] {
	a rico:Coordinates ;
	rico:latitude [organization.coordinates.lat] ;
	rico:longitude [organization.coordinates.long] ;
	rico:isOrWasCoordinatesOf ehri_institutions:[transformers.combinedPathInstitutionLocation(organization.coordinates.repository_id)] ; 
}

ehri:Region ehri_regions:[organization.region] {
	a rico:Place ;
	rico:name [organization.region] ;
	rico:isOrWasContainedBy ehri_countries:[transformers.toLowerCase(organization.country_code)] ;
	rico:containsOrContained ehri_cities:[organization.city] ;
	# To be implemented owl:sameAs
}

ehri:City ehri_cities:[organization.city] {
	a rico:Place ;
	rico:name [organization.city] ;
	rico:isOrWasContainedBy ehri_regions:[organization.region] ;
	rico:isOrWasContainedBy ehri_countries:[transformers.toLowerCase(organization.country_code)] ;
	# To be implemented owl:sameAs
}

ehri:AgentParallelName ehri_institutions:[parallel_name_id] { # Test for a combined path solution but it only takes into account that one address can exist for now.
	a rico:AgentName ;
	rico:name [organization.parallelNames.name] ;
	rico:isOrWasAgentNameOf ehri_institutions:[organization.parallelNames.repository_id] ;
}

ehri:AgentOtherName ehri_institutions:[other_name_id] { # Test for a combined path solution but it only takes into account that one address can exist for now.
	a rico:AgentName ;
	rico:name [organization.otherNames.name] ;
	rico:isOrWasAgentNameOf ehri_institutions:[organization.parallelNames.repository_id] ;
}

ehri:Mandate ehri_institutions:[transformers.combinedPathInstitutionMandates(organization.id) IF validators.nonEmpty(organization.mandates)] { # Test for a combined path solution but it only takes into account that one address can exist for now.
	a rico:Mandate ;
	rico:generalDescription [organization.mandates] @eng ; # the lang code should come from the API
	rico:authorizes ehri_institutions:[organization.id] ;
}

ehri:Country ehri_countries:[transformers.toLowerCase(organization.country_code)] { 
	rico:isOrWasLocationOfAgent ehri_institutions:[organization.id] ;
	rico:containsOrContained ehri_regions:[organization.region] ;
	rico:containsOrContained ehri_cities:[organization.country] ;
}