PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ehri: <http://lod.ehri-project-test.eu/ontology#>
PREFIX ehri_countries: <http://lod.ehri-project-test.eu/countries/>
PREFIX ehri_regions: <http://lod.ehri-project-test.eu/regions/>
PREFIX ehri_cities: <http://lod.ehri-project-test.eu/cities/>
PREFIX ehri_institutions: <http://lod.ehri-project-test.eu/institutions/>
PREFIX ehri_units: <http://lod.ehri-project-test.eu/units/>
PREFIX ehri_terms: <http://lod.ehri-project-test.eu/vocabularies/ehri-terms/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX schema: <http://schema.org/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rico: <https://www.ica.org/standards/RiC/ontology#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
FUNCTIONS transformers <scala: ShExMLTemplates/functions/Transformers.scala>
FUNCTIONS validators <scala: ShExMLTemplates/functions/Validators.scala>
SOURCE repositories <institutions\institutions_*.json>

ITERATOR repositories_iterator <jsonpath: $.data.repositories.items[*]> {
	PUSHED_FIELD id <id>
  	FIELD type <type>
	FIELD identifier <identifier>
	FIELD lat <latitude>
	FIELD long <longitude>
	FIELD countryId <country.id>
	ITERATOR descriptions <descriptions[*]> {
		FIELD languageCode <languageCode>
		FIELD name <name>
		FIELD identifier <identifier>
		FIELD typeOfEntity <typeOfEntity>
		FIELD history <history>
		FIELD geoculturalContext <geoculturalContext>
		FIELD mandates <mandates>
		FIELD administrativeStructure <administrativeStructure>
		FIELD records <records>
		FIELD buildings <buildings>
		FIELD holdings <holdings>
		FIELD findingAids <findingAids>
		FIELD openingTimes <openingTimes>
		FIELD conditions <conditions>
		FIELD accessibility <accessibility>
		FIELD researchServices <researchServices>
		FIELD reproductionServices <reproductionServices>
		FIELD publicAreas <publicAreas>
		FIELD rulesAndConventions <rulesAndConventions>
		FIELD status <status>
		FIELD datesOfDescription <datesOfDescription>
		FIELD maintenanceNotes <maintenanceNotes>
		FIELD otherFormsOfName <otherFormsOfName>
		FIELD parallelFormsOfName <parallelFormsOfName>
		FIELD languages <languages>
		FIELD scripts <scripts>
		FIELD sources <sources>
		POPPED_FIELD repository_id <id>
		ITERATOR addresses <addresses[*]> {
			FIELD contactPerson <contactPerson>
			FIELD name <name>
			FIELD street <street>
			FIELD municipality <municipality>
			FIELD region <firstdem>
			FIELD countryCode <countryCode>
			FIELD postalCode <postalCode>
			FIELD email <email>
			FIELD telephone <telephone>
			FIELD fax <fax>
			FIELD webpage <webpage>
			POPPED_FIELD repository_id <id>
		}
	}
	ITERATOR links <links[*]> {
        ITERATOR loc_org <[?(@.field=='locationOfOriginals')]> {
            FIELD description <description>
            ITERATOR targets <targets[*]> {
                POPPED_FIELD subject_id <id>
                FIELD target_id <id>
                FIELD type <type>
            }
        }
        ITERATOR loc_cop <[?(@.field=='locationOfCopies')]> {
            FIELD description <description>
            ITERATOR targets <targets[*]> {
                POPPED_FIELD subject_id <id>
                FIELD target_id <id>
                FIELD type <type>
            }
        }
    }
}

EXPRESSION organization <repositories.repositories_iterator>
EXPRESSION parallel_name_id <repositories.repositories_iterator.descriptions.repository_id + "/parallelNames/" + repositories.repositories_iterator.descriptions.parallelFormsOfName>
EXPRESSION other_name_id <repositories.repositories_iterator.descriptions.repository_id + "/otherNames/" + repositories.repositories_iterator.descriptions.otherFormsOfName>


####################
### Repositories ###
####################

ehri:Institution ehri_institutions:[organization.id] {
	a ehri:Institution ;
  	rico:name [organization.descriptions.name] @[organization.descriptions.languageCode] ;
	rico:history [organization.descriptions.history] @[organization.descriptions.languageCode] ;
	schema:openingHours [organization.descriptions.openingTimes] @[organization.descriptions.languageCode] ;
	rico:generalDescription [organization.descriptions.holdings] @[organization.descriptions.languageCode] ;
	ehri:institutionConditionsOfAccess [organization.descriptions.conditions] @[organization.descriptions.languageCode] ;
	ehri:institutionReproductionServices [organization.descriptions.reproductionServices] @[organization.descriptions.languageCode] ;
	ehri:generalContext [organization.descriptions.geoculturalContext] @[organization.descriptions.languageCode] ;
	ehri:administrativeStructure [organization.descriptions.administrativeStructure] @[organization.descriptions.languageCode] ;
	ehri:recordsManagementAndCollectingPolicies [organization.descriptions.records] @[organization.descriptions.languageCode] ;
	ehri:buildings [organization.descriptions.buildings] @[organization.descriptions.languageCode] ;
	ehri:accessibility [organization.descriptions.accessibility] @[organization.descriptions.languageCode] ;
	ehri:researchServices [organization.descriptions.researchServices] @[organization.descriptions.languageCode] ;
	ehri:publicAreas [organization.descriptions.publicAreas] @[organization.descriptions.languageCode] ;
	rdfs:seeAlso [organization.descriptions.addresses.webpage] ;
	ehri:findingAids [organization.descriptions.findingAids] @[organization.descriptions.languageCode] ;
	ehri:sources [organization.descriptions.sources] @[organization.descriptions.languageCode] ;
  	rico:agentHasOrHadLocation @ehri:InstitutionLocation ;
	rico:hasOrHadAgentName @ehri:AgentParallelName ;
	rico:hasOrHadAgentName @ehri:AgentOtherName ;
	rico:authorizedBy @ehri:Mandate ;
}

ehri:InstitutionLocation ehri_institutions:[transformers.combinedPathInstitutionLocation(organization.descriptions.addresses.repository_id, organization.descriptions.addresses.repository_id.index())] { 
	a rico:Place ;
	rico:isOrWasContainedBy @ehri:Region ;
	rico:isOrWasContainedBy @ehri:City ;
	rico:isOrWasContainedBy ehri_countries:[organization.countryId] ;
	rico:hasOrHadPhysicalLocation @ehri:InstitutionAddress ;
}
 
ehri:InstitutionAddress ehri_institutions:[transformers.combinedPathInstitutionAddress(organization.descriptions.addresses.repository_id, organization.descriptions.addresses.repository_id.index())] { 
	a ehri:InstitutionAddress ;
	rico:hasOrHadCoordinates @ehri:Coordinates ;
	schema:postalCode [organization.descriptions.addresses.postalCode] ;
	rico:name [organization.descriptions.addresses.street] ;
	schema:faxNumber [organization.descriptions.addresses.fax] ;
  	schema:telephone [organization.descriptions.addresses.telephone] ;
	schema:email [organization.descriptions.addresses.email] ;
	ehri:contactPerson [organization.descriptions.addresses.contactPerson] ;
	#schema:contactType [organization.address_name] ; # this does not exist in the GraphQL API
	rico:isOrWasPhysicalLocationOf ehri_institutions:[transformers.combinedPathInstitutionLocation(organization.descriptions.addresses.repository_id, organization.descriptions.addresses.repository_id.index())] ;
}

ehri:Coordinates ehri_institutions:[transformers.combinedPathInstitutionCoordinates(organization.id)] {
	a rico:Coordinates ;
	rico:latitude [organization.lat] ;
	rico:longitude [organization.long] ;
	rico:isOrWasCoordinatesOf ehri_institutions:[transformers.combinedPathInstitutionLocation(organization.descriptions.addresses.repository_id, organization.descriptions.addresses.repository_id.index())] ; 
}

ehri:Region ehri_regions:[organization.descriptions.addresses.region] {
	a rico:Place ;
	rico:name [organization.descriptions.addresses.region] ;
	rico:isOrWasContainedBy ehri_countries:[transformers.toLowerCase(organization.descriptions.addresses.countryCode)] ;
	rico:containsOrContained ehri_cities:[organization.descriptions.addresses.municipality] ;
	# To be implemented owl:sameAs
}

ehri:City ehri_cities:[organization.descriptions.addresses.municipality] {
	a rico:Place ;
	rico:name [organization.descriptions.addresses.municipality] ;
	rico:isOrWasContainedBy ehri_regions:[organization.descriptions.addresses.region] ;
	rico:isOrWasContainedBy ehri_countries:[transformers.toLowerCase(organization.descriptions.addresses.countryCode)] ;
	# To be implemented owl:sameAs
}

ehri:AgentParallelName ehri_institutions:[parallel_name_id] {
	a rico:AgentName ;
	rico:name [organization.descriptions.parallelFormsOfName] ;
	rico:isOrWasAgentNameOf ehri_institutions:[organization.descriptions.repository_id] ;
}

ehri:AgentOtherName ehri_institutions:[other_name_id] { 
	a rico:AgentName ;
	rico:name [organization.descriptions.otherFormsOfName] ;
	rico:isOrWasAgentNameOf ehri_institutions:[organization.descriptions.repository_id] ;
}

ehri:Mandate ehri_institutions:[transformers.combinedPathInstitutionMandates(organization.id) IF validators.nonEmpty(organization.descriptions.mandates)] {
	a rico:Mandate ;
	rico:generalDescription [organization.descriptions.mandates] @[organization.descriptions.languageCode] ;
	rico:authorizes ehri_institutions:[organization.descriptions.repository_id] ;
}

ehri:Country ehri_countries:[transformers.toLowerCase(organization.descriptions.addresses.countryCode)] { 
	a ehri:Country ;
	rico:isOrWasLocationOfAgent ehri_institutions:[organization.descriptions.addresses.repository_id] ;
	rico:containsOrContained ehri_regions:[organization.descriptions.addresses.region] ;
	rico:containsOrContained ehri_cities:[organization.descriptions.addresses.municipality] ;
}

#####################################
### Copies links for repositories ###
#####################################

# In these links it is not possible to put the description unless we reify the data model, TBD.

# Subject repository
ehri:InstitutionLocationOfOriginals ehri_institutions:[organization.id IF validators.isInstitution(organization.links.loc_org.targets.subject_id, organization.links.loc_org.targets.target_id, organization.links.loc_org.targets.type)] {
    # The object is a documentary unit
    ehri:isCopyOf ehri_units:[organization.links.loc_org.targets.target_id IF validators.isObjectDocumentaryUnit(organization.links.loc_org.targets.subject_id, organization.links.loc_org.targets.target_id, organization.links.loc_org.targets.type)] ;
    # The object is an institution
    ehri:isCopyOf ehri_institutions:[organization.links.loc_org.targets.target_id IF validators.isObjectInstitution(organization.links.loc_org.targets.subject_id, organization.links.loc_org.targets.target_id, organization.links.loc_org.targets.type)] ;
}

ehri:InstitutionLocationOfCopies ehri_institutions:[organization.id IF validators.isInstitution(organization.links.loc_cop.targets.subject_id, organization.links.loc_cop.targets.target_id, organization.links.loc_cop.targets.type)] {
    # The object is a documentary unit
    ehri:hasCopy ehri_units:[organization.links.loc_cop.targets.target_id IF validators.isObjectDocumentaryUnit(organization.links.loc_cop.targets.subject_id, organization.links.loc_cop.targets.target_id, organization.links.loc_cop.targets.type)] ;
    # The object is an institution
    ehri:hasCopy ehri_institutions:[organization.links.loc_cop.targets.target_id IF validators.isObjectInstitution(organization.links.loc_cop.targets.subject_id, organization.links.loc_cop.targets.target_id, organization.links.loc_cop.targets.type)] ;
}

ehri:InstitutionLocationOfOriginalsInverse ehri_institutions:[organization.links.loc_org.targets.target_id] {
    ehri:hasCopy ehri_institutions:[organization.links.loc_org.targets.subject_id IF validators.isObjectInstitution(organization.links.loc_org.targets.subject_id, organization.links.loc_org.targets.target_id, organization.links.loc_org.targets.type)] ;
}

ehri:InstitutionLocationOfOriginalsInverseHoldingSubject ehri_units:[organization.links.loc_org.targets.target_id IF validators.isObjectDocumentaryUnit(organization.links.loc_org.targets.subject_id, organization.links.loc_org.targets.target_id, organization.links.loc_org.targets.type)] { 
    ehri:hasCopy ehri_institutions:[organization.links.loc_org.targets.subject_id] ;
}    

ehri:InstitutionLocationOfCopiesInverse ehri_institutions:[organization.links.loc_cop.targets.target_id] {
    ehri:isCopyOf ehri_institutions:[organization.links.loc_cop.targets.subject_id IF validators.isObjectInstitution(organization.links.loc_cop.targets.subject_id, organization.links.loc_cop.targets.target_id, organization.links.loc_cop.targets.type)] ;
}

ehri:InstitutionLocationOfCopiesInverseHoldingSubject ehri_units:[organization.links.loc_cop.targets.target_id IF validators.isObjectDocumentaryUnit(organization.links.loc_cop.targets.subject_id, organization.links.loc_cop.targets.target_id, organization.links.loc_cop.targets.type)] { 
    ehri:isCopyOf ehri_institutions:[organization.links.loc_cop.targets.subject_id] ;
} 